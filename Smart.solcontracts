// SPDX-License-Identifier: MIT
pragma ton-solidity >= 0.45.0;

interface IERC20 {
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
}

interface IDEXRouter {
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);
}

contract Smart {
    address public usdt;
    address public usdc;
    address public silverCoin;
    address public galaxyMemeCoin;
    address public dexRouter;
    address public admin = "UQBw5LzsDZXeVBtKIOCOOc2eKN689ffblcK-qazXoE52qU6d";
    uint256 constant FEE_PERCENTAGE = 5; // 5%

    modifier onlyAdmin() {
        require(msg.sender == admin, 101, "المطلوب: الأدمن فقط");
        _;
    }

    constructor(
        address _usdt,
        address _usdc,
        address _silverCoin,
        address _galaxyMemeCoin,
        address _dexRouter
    ) public {
        usdt = _usdt;
        usdc = _usdc;
        silverCoin = _silverCoin;
        galaxyMemeCoin = _galaxyMemeCoin;
        dexRouter = _dexRouter;
    }

    function _validateStableCoin(address stableCoin) internal view {
        require(stableCoin == usdt || stableCoin == usdc, 101, "عملة مستقرة غير معتمدة");
    }

    function addLiquiditySilverCoin(
        address stableCoin,
        uint256 silverAmount,
        uint256 stableAmount,
        uint256 amountAMin,
        uint256 amountBMin,
        uint256 deadline
    ) external {
        _validateStableCoin(stableCoin);
        require(IERC20(silverCoin).transferFrom(msg.sender, address(this), silverAmount), 101, "فشل نقل الفضية");
        require(IERC20(stableCoin).transferFrom(msg.sender, address(this), stableAmount), 101, "فشل نقل العملة المستقرة");
        uint256 fee = stableAmount * FEE_PERCENTAGE / 100;
        uint256 netStable = stableAmount - fee;
        require(IERC20(stableCoin).transfer(admin, fee), 101, "فشل تحويل الرسوم");
        require(IERC20(silverCoin).approve(dexRouter, silverAmount), 101, "فشل الموافقة للفضية");
        require(IERC20(stableCoin).approve(dexRouter, netStable), 101, "فشل الموافقة للعملة المستقرة");
        IDEXRouter(dexRouter).addLiquidity(
            silverCoin,
            stableCoin,
            silverAmount,
            netStable,
            amountAMin,
            amountBMin,
            msg.sender,
            deadline
        );
    }

    function addLiquidityGalaxyCoin(
        address stableCoin,
        uint256 galaxyAmount,
        uint256 stableAmount,
        uint256 amountAMin,
        uint256 amountBMin,
        uint256 deadline
    ) external {
        _validateStableCoin(stableCoin);
        require(IERC20(galaxyMemeCoin).transferFrom(msg.sender, address(this), galaxyAmount), 101, "فشل نقل المجرة");
        require(IERC20(stableCoin).transferFrom(msg.sender, address(this), stableAmount), 101, "فشل نقل العملة المستقرة");
        uint256 fee = stableAmount * FEE_PERCENTAGE / 100;
        uint256 netStable = stableAmount - fee;
        require(IERC20(stableCoin).transfer(admin, fee), 101, "فشل تحويل الرسوم");
        require(IERC20(galaxyMemeCoin).approve(dexRouter, galaxyAmount), 101, "فشل الموافقة للمجرة");
        require(IERC20(stableCoin).approve(dexRouter, netStable), 101, "فشل الموافقة للعملة المستقرة");
        IDEXRouter(dexRouter).addLiquidity(
            galaxyMemeCoin,
            stableCoin,
            galaxyAmount,
            netStable,
            amountAMin,
            amountBMin,
            msg.sender,
            deadline
        );
    }
}
